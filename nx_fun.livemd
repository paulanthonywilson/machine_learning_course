# Playing with Nx

```elixir
Mix.install([
  :nx
])
```

## Section

Using the Numpy vectors in the course as a template for getting familiar with Nx

```elixir
1..3
|> Enum.to_list()
|> Nx.tensor()
|> Nx.pad(0, [{1, 3, 5}])
|> Nx.to_list()
|> dbg()
```

```elixir
0
|> List.duplicate(4)
|> Nx.tensor()
|> Nx.reshape({2, 2}, names: [:x, :y])
|> dbg()
```

```elixir
1..10
|> Enum.to_list()
|> Nx.tensor()
|> Nx.reshape({2, 5})
|> Nx.multiply(3)
```

```elixir
defmodule Util do
  def tensor_range(range) do
    range
    |> Enum.to_list()
    |> Nx.tensor()
  end
end
```

```elixir
import Util
```

```elixir
lhs = tensor_range(1..3)
rhs = tensor_range(15..13)

Nx.multiply(lhs, rhs)
```

```elixir
lhs = 1..4 |> tensor_range() |> Nx.reshape({2, 2}) |> IO.inspect()
rhs = 4..1 |> tensor_range() |> Nx.reshape({2, 2}) |> IO.inspect()
Nx.multiply(lhs, rhs)
```

```elixir
size = 100_000
key = Nx.Random.key(1234)

{lhs, key} = Nx.Random.randint(key, 0, 10_000, shape: {size})
{rhs, key} = Nx.Random.randint(key, 0, 10_000, shape: {size})

as_lists =
  lhs
  |> Nx.to_list()
  |> Enum.zip(Nx.to_list(rhs))

basic_mult = fn -> Enum.map(as_lists, fn {l, r} -> l * r end) end

{basic_time, standard_mult} = :timer.tc(basic_mult)

{nx_time, nx_mult} = :timer.tc(fn -> Nx.multiply(lhs, rhs) end)

IO.puts(basic_time)
IO.puts(nx_time)
```

```elixir
key = Nx.Random.key(316)

{t, key} = Nx.Random.randint(key, 0, 10_000, shape: {10})

as_list = Nx.to_list(t)

argmax = Nx.argmax(t)

[nx_max_value] = Nx.slice(t, [argmax], [1]) |> Nx.to_flat_list()

{Enum.max(as_list), nx_max_value}
```

```elixir
xa = [2104.0, 5.0, 1.0, 45.0]
wa = [0.39, 18.75, -53.36, -26.42]
x = Nx.tensor(xa)
w = Nx.tensor(wa)
b = 785.1811367994083

dots = Nx.dot(x, w) |> Nx.to_number()
sum_mult = x |> Nx.multiply(w) |> Nx.sum() |> Nx.to_number()

dots_sum_diff = Nx.subtract(dots, sum_mult)

non_nx =
  xa
  |> Enum.zip(wa)
  |> Enum.map(fn {l, r} -> l * r end)
  |> Enum.sum()

{dots, sum_mult, non_nx}
```

```elixir
l = Nx.tensor([4, 5, 6])
r = Nx.tensor([[1, 2, 3], [1, 2, 3]])

Nx.subtract(l, r)
```

```elixir
Nx.subtract(1, 3)
```

```elixir
l = 1..10 |> tensor_range()
r = List.duplicate(1, 10) |> Nx.tensor()

dd = Nx.dot(l, r)

l_sum = Nx.sum(l)

{dd, l_sum}
```
